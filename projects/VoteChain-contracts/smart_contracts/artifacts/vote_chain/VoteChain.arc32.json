{
    "hints": {
        "create_app()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "local_storage(account,pay)void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "opt_out(account)void": {
            "call_config": {
                "close_out": "CALL"
            }
        },
        "set_vote_dates(string,uint64,string,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cast_vote(account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudm90ZV9jaGFpbi5jb250cmFjdC5Wb3RlQ2hhaW4uY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 10
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 2
        }
    },
    "schema": {
        "global": {
            "declared": {
                "app_address": {
                    "type": "bytes",
                    "key": "app_address"
                },
                "app_id": {
                    "type": "uint64",
                    "key": "app_id"
                },
                "app_init_timestamp": {
                    "type": "uint64",
                    "key": "app_init_timestamp"
                },
                "choice1_vote_count": {
                    "type": "uint64",
                    "key": "choice1_vote_count"
                },
                "choice2_vote_count": {
                    "type": "uint64",
                    "key": "choice2_vote_count"
                },
                "choice3_vote_count": {
                    "type": "uint64",
                    "key": "choice3_vote_count"
                },
                "creator_address": {
                    "type": "bytes",
                    "key": "creator_address"
                },
                "total_accounts_opted_in": {
                    "type": "uint64",
                    "key": "total_accounts_opted_in"
                },
                "total_vote_count": {
                    "type": "uint64",
                    "key": "total_vote_count"
                },
                "vote_dates_final": {
                    "type": "uint64",
                    "key": "vote_dates_final"
                },
                "vote_end_date_unix": {
                    "type": "uint64",
                    "key": "vote_end_date_unix"
                },
                "vote_start_date_unix": {
                    "type": "uint64",
                    "key": "vote_start_date_unix"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "local_vote_choice": {
                    "type": "uint64",
                    "key": "vote_choice",
                    "descr": "Account vote choice (based on UInt64 corresponding w/ choice)"
                },
                "local_vote_status": {
                    "type": "uint64",
                    "key": "vote_status",
                    "descr": "Account vote status ('0' = not voted, '1' = voted)"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "VoteChain",
        "methods": [
            {
                "name": "create_app",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "local_storage",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_out",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_vote_dates",
                "args": [
                    {
                        "type": "string",
                        "name": "vote_start_date_str"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_start_date_unix"
                    },
                    {
                        "type": "string",
                        "name": "vote_end_date_str"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_end_date_unix"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "cast_vote",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "uint64",
                        "name": "choice"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}