#pragma version 10

smart_contracts.vote_chain.contract.VoteChain.approval_program:
    intcblock 0 1 2 1000
    bytecblock "vote_choice" "total_accounts_opted_in" "vote_dates_final" "choice1_vote_count" "choice2_vote_count" "choice3_vote_count" "total_vote_count" "vote_status" "vote_end_date_unix" "vote_start_date_unix"
    callsub __puya_arc4_router__
    return


// smart_contracts.vote_chain.contract.VoteChain.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@12
    pushbytess 0x5be219f0 0xf9744724 0x6f8aa888 0xb3fb275b 0xb1b28d75 0x4abfcdf3 0x5ff16da4 // method "generate()void", method "global_storage_mbr(pay)void", method "local_storage_mbr(account,pay)void", method "opt_out(account)void", method "set_vote_dates(string,uint64,string,uint64)void", method "submit_vote(account,uint64)void", method "terminate()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___generate_route@2 __puya_arc4_router___global_storage_mbr_route@3 __puya_arc4_router___local_storage_mbr_route@4 __puya_arc4_router___opt_out_route@5 __puya_arc4_router___set_vote_dates_route@6 __puya_arc4_router___submit_vote_route@7 __puya_arc4_router___terminate_route@8
    intc_0 // 0
    retsub

__puya_arc4_router___generate_route@2:
    // smart_contracts/vote_chain/contract.py:60-61
    // # Define abimethod that creates the smart contract App
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub generate
    intc_1 // 1
    retsub

__puya_arc4_router___global_storage_mbr_route@3:
    // smart_contracts/vote_chain/contract.py:84-85
    // # Define abimethod that allows the creator to use global storage by paying a MBR cost
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/vote_chain/contract.py:84-85
    // # Define abimethod that allows the creator to use global storage by paying a MBR cost
    // @arc4.abimethod()
    callsub global_storage_mbr
    intc_1 // 1
    retsub

__puya_arc4_router___local_storage_mbr_route@4:
    // smart_contracts/vote_chain/contract.py:101-102
    // # Define abimethod that allows any user to opt in to the smart contract's local storage by paying a MBR cost
    // @arc4.abimethod(allow_actions=["OptIn"])
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/vote_chain/contract.py:101-102
    // # Define abimethod that allows any user to opt in to the smart contract's local storage by paying a MBR cost
    // @arc4.abimethod(allow_actions=["OptIn"])
    callsub local_storage_mbr
    intc_1 // 1
    retsub

__puya_arc4_router___opt_out_route@5:
    // smart_contracts/vote_chain/contract.py:129-130
    // # Define abimethod that allows any user to opt out of the smart contract's local storage via the 'close out' method
    // @arc4.abimethod(allow_actions=["CloseOut"])
    txn OnCompletion
    intc_2 // CloseOut
    ==
    assert // OnCompletion is not CloseOut
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/vote_chain/contract.py:129-130
    // # Define abimethod that allows any user to opt out of the smart contract's local storage via the 'close out' method
    // @arc4.abimethod(allow_actions=["CloseOut"])
    callsub opt_out
    intc_1 // 1
    retsub

__puya_arc4_router___set_vote_dates_route@6:
    // smart_contracts/vote_chain/contract.py:166-167
    // # Define abimethod that allows the creator to set the vote dates
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    btoi
    // smart_contracts/vote_chain/contract.py:166-167
    // # Define abimethod that allows the creator to set the vote dates
    // @arc4.abimethod()
    callsub set_vote_dates
    intc_1 // 1
    retsub

__puya_arc4_router___submit_vote_route@7:
    // smart_contracts/vote_chain/contract.py:214-215
    // # Define abimethod that allows any user to submit their vote
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/vote_chain/contract.py:214-215
    // # Define abimethod that allows any user to submit their vote
    // @arc4.abimethod
    callsub submit_vote
    intc_1 // 1
    retsub

__puya_arc4_router___terminate_route@8:
    // smart_contracts/vote_chain/contract.py:259-260
    // # Define abimethod that allows the creator to delete App and get their global schema MBR cost refunded
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub terminate
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@12:
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.vote_chain.contract.VoteChain.generate() -> void:
generate:
    // smart_contracts/vote_chain/contract.py:60-62
    // # Define abimethod that creates the smart contract App
    // @arc4.abimethod(create="require")
    // def generate(self) -> None:
    proto 0 0
    // smart_contracts/vote_chain/contract.py:65
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/vote_chain/contract.py:63-66
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Transaction sender must match creator address."
    assert // Transaction sender must match creator address.
    // smart_contracts/vote_chain/contract.py:68-69
    // # Global storage variable assignments
    // self.vote_dates_final = UInt64(0)
    bytec_2 // "vote_dates_final"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:71
    // self.total_accounts_opted_in = UInt64(0)
    bytec_1 // "total_accounts_opted_in"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:73
    // self.choice1_vote_count = UInt64(0)
    bytec_3 // "choice1_vote_count"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:74
    // self.choice2_vote_count = UInt64(0)
    bytec 4 // "choice2_vote_count"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:75
    // self.choice3_vote_count = UInt64(0)
    bytec 5 // "choice3_vote_count"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:76
    // self.total_vote_count = UInt64(0)
    bytec 6 // "total_vote_count"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:81
    // Global.current_application_id.id,
    global CurrentApplicationID
    itob
    pushbytes "Generation method successful for App ID: "
    swap
    concat
    // smart_contracts/vote_chain/contract.py:78-82
    // # Log info on-chain
    // log(
    //     "Generation method successful for App ID: ",
    //     Global.current_application_id.id,
    // )
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.global_storage_mbr(mbr_pay: uint64) -> void:
global_storage_mbr:
    // smart_contracts/vote_chain/contract.py:84-86
    // # Define abimethod that allows the creator to use global storage by paying a MBR cost
    // @arc4.abimethod()
    // def global_storage_mbr(self, mbr_pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/vote_chain/contract.py:87-88
    // # Make necessary assertions to verify transaction requirements
    // assert mbr_pay.amount == self.calc_mbr(
    frame_dig -1
    gtxns Amount
    // smart_contracts/vote_chain/contract.py:89
    // num_bytes=UInt64(0), num_uint=UInt64(8)  # Calc MBR for using global schema
    intc_0 // 0
    pushint 8 // 8
    // smart_contracts/vote_chain/contract.py:87-90
    // # Make necessary assertions to verify transaction requirements
    // assert mbr_pay.amount == self.calc_mbr(
    //     num_bytes=UInt64(0), num_uint=UInt64(8)  # Calc MBR for using global schema
    // ), "MBR payment must meet the minimum requirement amount."
    callsub calc_mbr
    ==
    assert // MBR payment must meet the minimum requirement amount.
    // smart_contracts/vote_chain/contract.py:92
    // mbr_pay.sender == Global.creator_address
    frame_dig -1
    gtxns Sender
    global CreatorAddress
    ==
    // smart_contracts/vote_chain/contract.py:91-93
    // assert (
    //     mbr_pay.sender == Global.creator_address
    // ), "MBR payment sender must match the App creator account."
    assert // MBR payment sender must match the App creator account.
    // smart_contracts/vote_chain/contract.py:95
    // mbr_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/vote_chain/contract.py:94-96
    // assert (
    //     mbr_pay.receiver == Global.current_application_address
    // ), "MBR payment reciever must be the App address."
    assert // MBR payment reciever must be the App address.
    // smart_contracts/vote_chain/contract.py:98-99
    // # Log info on-chain
    // log("Global State successfully funded by account address: ", Txn.sender)
    pushbytes "Global State successfully funded by account address: "
    txn Sender
    concat
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.calc_mbr(num_bytes: uint64, num_uint: uint64) -> uint64:
calc_mbr:
    // smart_contracts/vote_chain/contract.py:46-48
    // # Define subroutine that calculates the minimum balance requirement total cost
    // @subroutine
    // def calc_mbr(self, num_bytes: UInt64, num_uint: UInt64) -> UInt64:
    proto 2 1
    // smart_contracts/vote_chain/contract.py:50
    // byte_fee = UInt64(50_000)  # Byte slice fee for key-value pair
    pushint 50000 // 50000
    // smart_contracts/vote_chain/contract.py:53-54
    // # Multiply respective fee cost with the number of key-value pairs in each schema to get total fee amount
    // total_byte_fee = byte_fee * num_bytes
    frame_dig -2
    *
    // smart_contracts/vote_chain/contract.py:51
    // uint_fee = UInt64(28_500)  # Uint fee for key-value pair
    pushint 28500 // 28500
    // smart_contracts/vote_chain/contract.py:55
    // total_uint_fee = uint_fee * num_uint
    frame_dig -1
    *
    // smart_contracts/vote_chain/contract.py:57-58
    // # Return the minimum balance requirement total cost
    // return Global.min_balance + base_fee + total_byte_fee + total_uint_fee
    global MinBalance
    // smart_contracts/vote_chain/contract.py:49
    // base_fee = UInt64(100_000)  # Base fee
    pushint 100000 // 100000
    // smart_contracts/vote_chain/contract.py:57-58
    // # Return the minimum balance requirement total cost
    // return Global.min_balance + base_fee + total_byte_fee + total_uint_fee
    +
    uncover 2
    +
    +
    retsub


// smart_contracts.vote_chain.contract.VoteChain.local_storage_mbr(account: bytes, mbr_pay: uint64) -> void:
local_storage_mbr:
    // smart_contracts/vote_chain/contract.py:101-105
    // # Define abimethod that allows any user to opt in to the smart contract's local storage by paying a MBR cost
    // @arc4.abimethod(allow_actions=["OptIn"])
    // def local_storage_mbr(
    //     self, account: Account, mbr_pay: gtxn.PaymentTransaction
    // ) -> None:
    proto 2 0
    // smart_contracts/vote_chain/contract.py:106-107
    // # Make necessary assertions to verify transaction requirements
    // assert mbr_pay.amount == self.calc_mbr(
    frame_dig -1
    gtxns Amount
    // smart_contracts/vote_chain/contract.py:108
    // num_bytes=UInt64(0), num_uint=UInt64(2)  # Calc MBR for using local schema
    intc_0 // 0
    intc_2 // 2
    // smart_contracts/vote_chain/contract.py:106-109
    // # Make necessary assertions to verify transaction requirements
    // assert mbr_pay.amount == self.calc_mbr(
    //     num_bytes=UInt64(0), num_uint=UInt64(2)  # Calc MBR for using local schema
    // ), "MBR payment must meet the minimum requirement amount."
    callsub calc_mbr
    ==
    assert // MBR payment must meet the minimum requirement amount.
    // smart_contracts/vote_chain/contract.py:111
    // mbr_pay.sender == account
    frame_dig -1
    gtxns Sender
    frame_dig -2
    ==
    // smart_contracts/vote_chain/contract.py:110-112
    // assert (
    //     mbr_pay.sender == account
    // ), "MBR payment sender must match the account opting in."
    assert // MBR payment sender must match the account opting in.
    // smart_contracts/vote_chain/contract.py:114
    // mbr_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/vote_chain/contract.py:113-115
    // assert (
    //     mbr_pay.receiver == Global.current_application_address
    // ), "MBR payment reciever must be the App address."
    assert // MBR payment reciever must be the App address.
    // smart_contracts/vote_chain/contract.py:117-118
    // # Change local state var 'self.local_vote_status' (specific to account) value from 'None' to '0'
    // self.local_vote_status[account] = UInt64(0)
    frame_dig -2
    bytec 7 // "vote_status"
    intc_0 // 0
    app_local_put
    // smart_contracts/vote_chain/contract.py:120-121
    // # Change local state var 'self.local_vote_choice' (specific to account) value from 'None' to '0'
    // self.local_vote_choice[account] = UInt64(0)
    frame_dig -2
    bytec_0 // "vote_choice"
    intc_0 // 0
    app_local_put
    // smart_contracts/vote_chain/contract.py:123-124
    // # Increment count for total accounts opted in
    // self.total_accounts_opted_in += UInt64(1)
    intc_0 // 0
    bytec_1 // "total_accounts_opted_in"
    app_global_get_ex
    assert // check self.total_accounts_opted_in exists
    intc_1 // 1
    +
    bytec_1 // "total_accounts_opted_in"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:126-127
    // # Log info on-chain
    // log("Local State successfully funded by account address: ", Txn.sender)
    pushbytes "Local State successfully funded by account address: "
    txn Sender
    concat
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.opt_out(account: bytes) -> void:
opt_out:
    // smart_contracts/vote_chain/contract.py:129-131
    // # Define abimethod that allows any user to opt out of the smart contract's local storage via the 'close out' method
    // @arc4.abimethod(allow_actions=["CloseOut"])
    // def opt_out(self, account: Account) -> None:
    proto 1 0
    // smart_contracts/vote_chain/contract.py:132-135
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(Global.current_application_id.id)
    // ), "Account must first be opted-in to App client in order to close out."
    frame_dig -1
    // smart_contracts/vote_chain/contract.py:134
    // Application(Global.current_application_id.id)
    global CurrentApplicationID
    // smart_contracts/vote_chain/contract.py:132-135
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(Global.current_application_id.id)
    // ), "Account must first be opted-in to App client in order to close out."
    app_opted_in
    assert // Account must first be opted-in to App client in order to close out.
    // smart_contracts/vote_chain/contract.py:138
    // account.is_opted_in(Application(Global.current_application_id.id))
    frame_dig -1
    global CurrentApplicationID
    app_opted_in
    // smart_contracts/vote_chain/contract.py:138-139
    // account.is_opted_in(Application(Global.current_application_id.id))
    // and self.local_vote_choice[account] == UInt64(0)
    bz opt_out_or_contd@2
    // smart_contracts/vote_chain/contract.py:139
    // and self.local_vote_choice[account] == UInt64(0)
    frame_dig -1
    intc_0 // 0
    bytec_0 // "vote_choice"
    app_local_get_ex
    assert // check self.local_vote_choice exists for account
    // smart_contracts/vote_chain/contract.py:138-139
    // account.is_opted_in(Application(Global.current_application_id.id))
    // and self.local_vote_choice[account] == UInt64(0)
    bz opt_out_bool_true@5

opt_out_or_contd@2:
    // smart_contracts/vote_chain/contract.py:141
    // account.is_opted_in(Application(Global.current_application_id.id))
    frame_dig -1
    global CurrentApplicationID
    app_opted_in
    // smart_contracts/vote_chain/contract.py:141-143
    // account.is_opted_in(Application(Global.current_application_id.id))
    // and self.local_vote_choice[account] != UInt64(0)
    // and Global.latest_timestamp > self.vote_end_date_unix
    bz opt_out_bool_false@6
    // smart_contracts/vote_chain/contract.py:142
    // and self.local_vote_choice[account] != UInt64(0)
    frame_dig -1
    intc_0 // 0
    bytec_0 // "vote_choice"
    app_local_get_ex
    assert // check self.local_vote_choice exists for account
    // smart_contracts/vote_chain/contract.py:141-143
    // account.is_opted_in(Application(Global.current_application_id.id))
    // and self.local_vote_choice[account] != UInt64(0)
    // and Global.latest_timestamp > self.vote_end_date_unix
    bz opt_out_bool_false@6
    // smart_contracts/vote_chain/contract.py:143
    // and Global.latest_timestamp > self.vote_end_date_unix
    global LatestTimestamp
    intc_0 // 0
    bytec 8 // "vote_end_date_unix"
    app_global_get_ex
    assert // check self.vote_end_date_unix exists
    >
    // smart_contracts/vote_chain/contract.py:141-143
    // account.is_opted_in(Application(Global.current_application_id.id))
    // and self.local_vote_choice[account] != UInt64(0)
    // and Global.latest_timestamp > self.vote_end_date_unix
    bz opt_out_bool_false@6

opt_out_bool_true@5:
    intc_1 // 1
    b opt_out_bool_merge@7

opt_out_bool_false@6:
    intc_0 // 0

opt_out_bool_merge@7:
    // smart_contracts/vote_chain/contract.py:137-144
    // assert (  # Account is opted-in but hasn't voted yet
    //     account.is_opted_in(Application(Global.current_application_id.id))
    //     and self.local_vote_choice[account] == UInt64(0)
    // ) or (  # Account is opted-in and has voted and voting period is over
    //     account.is_opted_in(Application(Global.current_application_id.id))
    //     and self.local_vote_choice[account] != UInt64(0)
    //     and Global.latest_timestamp > self.vote_end_date_unix
    // ), "Requirements for opting-out of App client are insufficient."
    assert // Requirements for opting-out of App client are insufficient.
    // smart_contracts/vote_chain/contract.py:146-147
    // # Delete the user's local storage
    // del self.local_vote_status[account]
    frame_dig -1
    bytec 7 // "vote_status"
    app_local_del
    // smart_contracts/vote_chain/contract.py:148
    // del self.local_vote_choice[account]
    frame_dig -1
    bytec_0 // "vote_choice"
    app_local_del
    // smart_contracts/vote_chain/contract.py:150-151
    // # Decrease the total count of opted-in accounts
    // self.total_accounts_opted_in -= UInt64(1)
    intc_0 // 0
    bytec_1 // "total_accounts_opted_in"
    app_global_get_ex
    assert // check self.total_accounts_opted_in exists
    intc_1 // 1
    -
    bytec_1 // "total_accounts_opted_in"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:155-161
    // itxn.Payment(
    //     receiver=account,
    //     amount=self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(2)) - min_txn_fee,
    //     sender=Global.current_application_address,
    //     fee=min_txn_fee,
    //     note="MBR refund for closing out.",
    // ).submit()
    itxn_begin
    // smart_contracts/vote_chain/contract.py:157
    // amount=self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(2)) - min_txn_fee,
    intc_0 // 0
    intc_2 // 2
    callsub calc_mbr
    // smart_contracts/vote_chain/contract.py:153-154
    // # Submit inner transaction (account gets their mbr payment refunded)
    // min_txn_fee = UInt64(1000)
    intc_3 // 1000
    // smart_contracts/vote_chain/contract.py:157
    // amount=self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(2)) - min_txn_fee,
    -
    // smart_contracts/vote_chain/contract.py:158
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/vote_chain/contract.py:160
    // note="MBR refund for closing out.",
    pushbytes "MBR refund for closing out."
    itxn_field Note
    itxn_field Sender
    itxn_field Amount
    frame_dig -1
    itxn_field Receiver
    // smart_contracts/vote_chain/contract.py:155
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/vote_chain/contract.py:153-154
    // # Submit inner transaction (account gets their mbr payment refunded)
    // min_txn_fee = UInt64(1000)
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/vote_chain/contract.py:155-161
    // itxn.Payment(
    //     receiver=account,
    //     amount=self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(2)) - min_txn_fee,
    //     sender=Global.current_application_address,
    //     fee=min_txn_fee,
    //     note="MBR refund for closing out.",
    // ).submit()
    itxn_submit
    // smart_contracts/vote_chain/contract.py:163-164
    // # Log info on-chain
    // log("Close-out method successful for account address: ", account)
    pushbytes "Close-out method successful for account address: "
    frame_dig -1
    concat
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.set_vote_dates(vote_start_date_str: bytes, vote_start_date_unix: uint64, vote_end_date_str: bytes, vote_end_date_unix: uint64) -> void:
set_vote_dates:
    // smart_contracts/vote_chain/contract.py:166-174
    // # Define abimethod that allows the creator to set the vote dates
    // @arc4.abimethod()
    // def set_vote_dates(
    //     self,
    //     vote_start_date_str: String,
    //     vote_start_date_unix: UInt64,
    //     vote_end_date_str: String,
    //     vote_end_date_unix: UInt64,
    // ) -> None:
    proto 4 0
    // smart_contracts/vote_chain/contract.py:177
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/vote_chain/contract.py:175-178
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Only App creator can set vote dates."
    assert // Only App creator can set vote dates.
    // smart_contracts/vote_chain/contract.py:190
    // vote_start_date_unix < vote_end_date_unix
    frame_dig -3
    frame_dig -1
    <
    // smart_contracts/vote_chain/contract.py:189-191
    // assert (
    //     vote_start_date_unix < vote_end_date_unix
    // ), "Start date must be earlier than end date."
    assert // Start date must be earlier than end date.
    // smart_contracts/vote_chain/contract.py:193-195
    // assert vote_end_date_unix >= vote_start_date_unix + UInt64(
    //     3 * 24 * 60 * 60
    // ), "End date must be at least 3 days later than the start date."
    frame_dig -3
    pushint 259200 // 259200
    +
    frame_dig -1
    <=
    assert // End date must be at least 3 days later than the start date.
    // smart_contracts/vote_chain/contract.py:197
    // assert vote_end_date_unix - vote_start_date_unix <= UInt64(
    frame_dig -1
    frame_dig -3
    -
    // smart_contracts/vote_chain/contract.py:197-199
    // assert vote_end_date_unix - vote_start_date_unix <= UInt64(
    //     14 * 24 * 60 * 60
    // ), "Voting period can not exceed 14 days."
    pushint 1209600 // 1209600
    <=
    assert // Voting period can not exceed 14 days.
    // smart_contracts/vote_chain/contract.py:201
    // assert self.vote_dates_final == UInt64(0), "Vote dates can only be set once."
    intc_0 // 0
    bytec_2 // "vote_dates_final"
    app_global_get_ex
    assert // check self.vote_dates_final exists
    !
    assert // Vote dates can only be set once.
    // smart_contracts/vote_chain/contract.py:203-204
    // # Get and store vote dates in unix int format
    // self.vote_start_date_unix = vote_start_date_unix
    bytec 9 // "vote_start_date_unix"
    frame_dig -3
    app_global_put
    // smart_contracts/vote_chain/contract.py:205
    // self.vote_end_date_unix = vote_end_date_unix
    bytec 8 // "vote_end_date_unix"
    frame_dig -1
    app_global_put
    // smart_contracts/vote_chain/contract.py:207-208
    // # Make vote dates final
    // self.vote_dates_final = UInt64(1)
    bytec_2 // "vote_dates_final"
    intc_1 // 1
    app_global_put
    // smart_contracts/vote_chain/contract.py:210-211
    // # Log info on-chain
    // log("Vote start date: ", vote_start_date_str)
    pushbytes "Vote start date: "
    frame_dig -4
    concat
    log
    // smart_contracts/vote_chain/contract.py:212
    // log("Vote end date: ", vote_end_date_str)
    pushbytes "Vote end date: "
    frame_dig -2
    concat
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.submit_vote(account: bytes, choice: uint64) -> void:
submit_vote:
    // smart_contracts/vote_chain/contract.py:214-216
    // # Define abimethod that allows any user to submit their vote
    // @arc4.abimethod
    // def submit_vote(self, account: Account, choice: UInt64) -> None:
    proto 2 0
    // smart_contracts/vote_chain/contract.py:217-220
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(Global.current_application_id.id)
    // ), "Account must be opted-in before voting."
    frame_dig -2
    // smart_contracts/vote_chain/contract.py:219
    // Application(Global.current_application_id.id)
    global CurrentApplicationID
    // smart_contracts/vote_chain/contract.py:217-220
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(Global.current_application_id.id)
    // ), "Account must be opted-in before voting."
    app_opted_in
    assert // Account must be opted-in before voting.
    // smart_contracts/vote_chain/contract.py:223
    // Global.latest_timestamp > self.vote_start_date_unix
    global LatestTimestamp
    intc_0 // 0
    bytec 9 // "vote_start_date_unix"
    app_global_get_ex
    assert // check self.vote_start_date_unix exists
    >
    // smart_contracts/vote_chain/contract.py:222-224
    // assert (
    //     Global.latest_timestamp > self.vote_start_date_unix
    // ), "Voting period has not started yet."
    assert // Voting period has not started yet.
    // smart_contracts/vote_chain/contract.py:227
    // Global.latest_timestamp < self.vote_end_date_unix
    global LatestTimestamp
    intc_0 // 0
    bytec 8 // "vote_end_date_unix"
    app_global_get_ex
    assert // check self.vote_end_date_unix exists
    <
    // smart_contracts/vote_chain/contract.py:226-228
    // assert (
    //     Global.latest_timestamp < self.vote_end_date_unix
    // ), "Voting period has ended."
    assert // Voting period has ended.
    // smart_contracts/vote_chain/contract.py:230
    // assert self.local_vote_choice[account] == UInt64(
    frame_dig -2
    intc_0 // 0
    bytec_0 // "vote_choice"
    app_local_get_ex
    assert // check self.local_vote_choice exists for account
    // smart_contracts/vote_chain/contract.py:230-232
    // assert self.local_vote_choice[account] == UInt64(
    //     0
    // ), "This account already submitted a vote."
    !
    assert // This account already submitted a vote.
    // smart_contracts/vote_chain/contract.py:235
    // choice == UInt64(1) or choice == UInt64(2) or choice == UInt64(3)
    frame_dig -1
    intc_1 // 1
    ==
    dup
    bnz submit_vote_bool_true@3
    frame_dig -1
    intc_2 // 2
    ==
    bnz submit_vote_bool_true@3
    frame_dig -1
    pushint 3 // 3
    ==
    bz submit_vote_bool_false@4

submit_vote_bool_true@3:
    intc_1 // 1
    b submit_vote_bool_merge@5

submit_vote_bool_false@4:
    intc_0 // 0

submit_vote_bool_merge@5:
    // smart_contracts/vote_chain/contract.py:234-236
    // assert (
    //     choice == UInt64(1) or choice == UInt64(2) or choice == UInt64(3)
    // ), "Invalid choice. Can only choose between choices 1, 2, 3."
    assert // Invalid choice. Can only choose between choices 1, 2, 3.
    // smart_contracts/vote_chain/contract.py:238-239
    // # Mark the account as having voted
    // self.local_vote_status[account] = UInt64(1)
    frame_dig -2
    bytec 7 // "vote_status"
    intc_1 // 1
    app_local_put
    // smart_contracts/vote_chain/contract.py:241-242
    // # Increment count for total votes
    // self.total_vote_count += UInt64(1)
    intc_0 // 0
    bytec 6 // "total_vote_count"
    app_global_get_ex
    assert // check self.total_vote_count exists
    intc_1 // 1
    +
    bytec 6 // "total_vote_count"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:244-245
    // # Update vote tally
    // if choice == UInt64(1):
    frame_dig 0
    bz submit_vote_else_body@7
    // smart_contracts/vote_chain/contract.py:246
    // self.choice1_vote_count += UInt64(1)
    intc_0 // 0
    bytec_3 // "choice1_vote_count"
    app_global_get_ex
    assert // check self.choice1_vote_count exists
    intc_1 // 1
    +
    bytec_3 // "choice1_vote_count"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:247
    // self.local_vote_choice[account] = UInt64(1)
    frame_dig -2
    bytec_0 // "vote_choice"
    intc_1 // 1
    app_local_put
    b submit_vote_after_if_else@11

submit_vote_else_body@7:
    // smart_contracts/vote_chain/contract.py:248
    // elif choice == UInt64(2):
    frame_dig -1
    intc_2 // 2
    ==
    bz submit_vote_else_body@9
    // smart_contracts/vote_chain/contract.py:249
    // self.choice2_vote_count += UInt64(1)
    intc_0 // 0
    bytec 4 // "choice2_vote_count"
    app_global_get_ex
    assert // check self.choice2_vote_count exists
    intc_1 // 1
    +
    bytec 4 // "choice2_vote_count"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:250
    // self.local_vote_choice[account] = UInt64(2)
    frame_dig -2
    bytec_0 // "vote_choice"
    intc_2 // 2
    app_local_put
    b submit_vote_after_if_else@11

submit_vote_else_body@9:
    // smart_contracts/vote_chain/contract.py:252
    // self.choice3_vote_count += UInt64(1)
    intc_0 // 0
    bytec 5 // "choice3_vote_count"
    app_global_get_ex
    assert // check self.choice3_vote_count exists
    intc_1 // 1
    +
    bytec 5 // "choice3_vote_count"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:253
    // self.local_vote_choice[account] = UInt64(3)
    frame_dig -2
    bytec_0 // "vote_choice"
    pushint 3 // 3
    app_local_put

submit_vote_after_if_else@11:
    // smart_contracts/vote_chain/contract.py:255-256
    // # Log info on-chain
    // log("Vote submitted successfully for account address: ", account)
    pushbytes "Vote submitted successfully for account address: "
    frame_dig -2
    concat
    log
    // smart_contracts/vote_chain/contract.py:257
    // log("Vote submitted for choice number: ", choice)
    frame_dig -1
    itob
    pushbytes "Vote submitted for choice number: "
    swap
    concat
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.terminate() -> void:
terminate:
    // smart_contracts/vote_chain/contract.py:259-261
    // # Define abimethod that allows the creator to delete App and get their global schema MBR cost refunded
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def terminate(self) -> None:
    proto 0 0
    // smart_contracts/vote_chain/contract.py:264
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/vote_chain/contract.py:262-265
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Only App creator can terminate the App."
    assert // Only App creator can terminate the App.
    // smart_contracts/vote_chain/contract.py:269-275
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(8)) - min_txn_fee,
    //     sender=Global.current_application_address,
    //     fee=min_txn_fee,
    //     note="MBR refund for deleting App.",
    // ).submit()
    itxn_begin
    // smart_contracts/vote_chain/contract.py:270
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/vote_chain/contract.py:271
    // amount=self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(8)) - min_txn_fee,
    intc_0 // 0
    pushint 8 // 8
    callsub calc_mbr
    // smart_contracts/vote_chain/contract.py:267-268
    // # Submit inner transaction (creator gets their mbr payment refunded)
    // min_txn_fee = UInt64(1000)
    intc_3 // 1000
    // smart_contracts/vote_chain/contract.py:271
    // amount=self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(8)) - min_txn_fee,
    -
    // smart_contracts/vote_chain/contract.py:272
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/vote_chain/contract.py:274
    // note="MBR refund for deleting App.",
    pushbytes "MBR refund for deleting App."
    itxn_field Note
    itxn_field Sender
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/vote_chain/contract.py:269
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/vote_chain/contract.py:267-268
    // # Submit inner transaction (creator gets their mbr payment refunded)
    // min_txn_fee = UInt64(1000)
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/vote_chain/contract.py:269-275
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(8)) - min_txn_fee,
    //     sender=Global.current_application_address,
    //     fee=min_txn_fee,
    //     note="MBR refund for deleting App.",
    // ).submit()
    itxn_submit
    // smart_contracts/vote_chain/contract.py:280
    // Global.current_application_id.id,
    global CurrentApplicationID
    itob
    pushbytes "Termination method successful for App ID: "
    swap
    concat
    // smart_contracts/vote_chain/contract.py:277-281
    // # Log info on-chain
    // log(
    //     "Termination method successful for App ID: ",
    //     Global.current_application_id.id,
    // )
    log
    retsub
