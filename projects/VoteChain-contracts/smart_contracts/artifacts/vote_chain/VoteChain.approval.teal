#pragma version 10

smart_contracts.vote_chain.contract.VoteChain.approval_program:
    intcblock 0 1 2 1000
    bytecblock "vote_status" "total_accounts_opted_in" "vote_choice" "choice1_vote_count" "choice2_vote_count" "choice3_vote_count" "total_vote_count" "vote_dates_final" "app_id" "app_address" "vote_end_date_unix" "creator_address" "vote_start_date_unix"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.vote_chain.contract.VoteChain.__init__() -> void:
__init__:
    // smart_contracts/vote_chain/contract.py:32
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/vote_chain/contract.py:34-35
    // # Global storage variable assignments
    // self.total_accounts_opted_in = UInt64(0)
    bytec_1 // "total_accounts_opted_in"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:37
    // self.choice1_vote_count = UInt64(0)
    bytec_3 // "choice1_vote_count"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:38
    // self.choice2_vote_count = UInt64(0)
    bytec 4 // "choice2_vote_count"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:39
    // self.choice3_vote_count = UInt64(0)
    bytec 5 // "choice3_vote_count"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:41
    // self.total_vote_count = UInt64(0)
    bytec 6 // "total_vote_count"
    intc_0 // 0
    app_global_put
    // smart_contracts/vote_chain/contract.py:43
    // self.vote_dates_final = UInt64(0)
    bytec 7 // "vote_dates_final"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.vote_chain.contract.VoteChain.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@10
    pushbytess 0x0484c231 0x90c936a8 0xb3fb275b 0xb1b28d75 0x5dcb0f10 // method "create_app()void", method "local_storage(account,pay)void", method "opt_out(account)void", method "set_vote_dates(string,uint64,string,uint64)void", method "cast_vote(account,uint64)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_app_route@2 __puya_arc4_router___local_storage_route@3 __puya_arc4_router___opt_out_route@4 __puya_arc4_router___set_vote_dates_route@5 __puya_arc4_router___cast_vote_route@6
    intc_0 // 0
    retsub

__puya_arc4_router___create_app_route@2:
    // smart_contracts/vote_chain/contract.py:81-82
    // # Define abimethod that creates the smart contract App
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub create_app
    intc_1 // 1
    retsub

__puya_arc4_router___local_storage_route@3:
    // smart_contracts/vote_chain/contract.py:89-90
    // # Define abimethod that opts user in to local storage
    // @arc4.abimethod(allow_actions=["OptIn"])
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/vote_chain/contract.py:89-90
    // # Define abimethod that opts user in to local storage
    // @arc4.abimethod(allow_actions=["OptIn"])
    callsub local_storage
    intc_1 // 1
    retsub

__puya_arc4_router___opt_out_route@4:
    // smart_contracts/vote_chain/contract.py:115-116
    // # Define abimethod that lets the user opt out
    // @arc4.abimethod(allow_actions=["CloseOut"])
    txn OnCompletion
    intc_2 // CloseOut
    ==
    assert // OnCompletion is not CloseOut
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/vote_chain/contract.py:115-116
    // # Define abimethod that lets the user opt out
    // @arc4.abimethod(allow_actions=["CloseOut"])
    callsub opt_out
    intc_1 // 1
    retsub

__puya_arc4_router___set_vote_dates_route@5:
    // smart_contracts/vote_chain/contract.py:148-149
    // # Define abimethod that sets the vote deadline (consider making it updatable)
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    btoi
    // smart_contracts/vote_chain/contract.py:148-149
    // # Define abimethod that sets the vote deadline (consider making it updatable)
    // @arc4.abimethod()
    callsub set_vote_dates
    intc_1 // 1
    retsub

__puya_arc4_router___cast_vote_route@6:
    // smart_contracts/vote_chain/contract.py:183-184
    // # Define abimethod that lets the user cast their vote
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/vote_chain/contract.py:183-184
    // # Define abimethod that lets the user cast their vote
    // @arc4.abimethod
    callsub cast_vote
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@10:
    // smart_contracts/vote_chain/contract.py:18
    // class VoteChain(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.vote_chain.contract.VoteChain.create_app() -> void:
create_app:
    // smart_contracts/vote_chain/contract.py:81-83
    // # Define abimethod that creates the smart contract App
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    // def create_app(self) -> None:
    proto 0 0
    // smart_contracts/vote_chain/contract.py:84
    // self.app_id = Global.current_application_id  # Store App ID.
    bytec 8 // "app_id"
    global CurrentApplicationID
    app_global_put
    // smart_contracts/vote_chain/contract.py:85
    // self.app_address = Global.current_application_address  # Store App address.
    bytec 9 // "app_address"
    global CurrentApplicationAddress
    app_global_put
    // smart_contracts/vote_chain/contract.py:86
    // self.app_init_timestamp = Global.latest_timestamp  # Store App init time.
    pushbytes "app_init_timestamp"
    global LatestTimestamp
    app_global_put
    // smart_contracts/vote_chain/contract.py:87
    // self.creator_address = Global.creator_address  # Store App creator.
    bytec 11 // "creator_address"
    global CreatorAddress
    app_global_put
    retsub


// smart_contracts.vote_chain.contract.VoteChain.local_storage(account: bytes, mbr_pay: uint64) -> void:
local_storage:
    // smart_contracts/vote_chain/contract.py:89-91
    // # Define abimethod that opts user in to local storage
    // @arc4.abimethod(allow_actions=["OptIn"])
    // def local_storage(self, account: Account, mbr_pay: gtxn.PaymentTransaction) -> None:
    proto 2 0
    // smart_contracts/vote_chain/contract.py:94
    // mbr_pay.amount == self.calc_mbr()
    frame_dig -1
    gtxns Amount
    callsub calc_mbr
    ==
    // smart_contracts/vote_chain/contract.py:92-95
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     mbr_pay.amount == self.calc_mbr()
    // ), "MBR payment must meet the minimum requirement amount."
    assert // MBR payment must meet the minimum requirement amount.
    // smart_contracts/vote_chain/contract.py:97
    // mbr_pay.sender == account
    frame_dig -1
    gtxns Sender
    frame_dig -2
    ==
    // smart_contracts/vote_chain/contract.py:96-98
    // assert (
    //     mbr_pay.sender == account
    // ), "MBR payment sender must match the account opting in."
    assert // MBR payment sender must match the account opting in.
    // smart_contracts/vote_chain/contract.py:100
    // mbr_pay.receiver == self.app_address
    frame_dig -1
    gtxns Receiver
    intc_0 // 0
    bytec 9 // "app_address"
    app_global_get_ex
    assert // check self.app_address exists
    ==
    // smart_contracts/vote_chain/contract.py:99-101
    // assert (
    //     mbr_pay.receiver == self.app_address
    // ), "MBR payment reciever must be the App address."
    assert // MBR payment reciever must be the App address.
    // smart_contracts/vote_chain/contract.py:103-104
    // # Change local state var 'self.local_vote_status' (specific to account) value from 'None' to '0'
    // self.local_vote_status[account] = UInt64(0)
    frame_dig -2
    bytec_0 // "vote_status"
    intc_0 // 0
    app_local_put
    // smart_contracts/vote_chain/contract.py:106-107
    // # Change local state var 'self.local_vote_choice' (specific to account) value from 'None' to '0'
    // self.local_vote_choice[account] = UInt64(0)
    frame_dig -2
    bytec_2 // "vote_choice"
    intc_0 // 0
    app_local_put
    // smart_contracts/vote_chain/contract.py:109-110
    // # Increment count for total accounts opted in
    // self.total_accounts_opted_in += UInt64(1)
    intc_0 // 0
    bytec_1 // "total_accounts_opted_in"
    app_global_get_ex
    assert // check self.total_accounts_opted_in exists
    intc_1 // 1
    +
    bytec_1 // "total_accounts_opted_in"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:112-113
    // # Log info on-chain
    // log("Opt-in successful for account address: ", account)
    pushbytes "Opt-in successful for account address: "
    frame_dig -2
    concat
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.calc_mbr() -> uint64:
calc_mbr:
    // smart_contracts/vote_chain/contract.py:58-60
    // # Define subroutine that calculates the minimum balance requirement for opting in to the App
    // @subroutine
    // def calc_mbr(self) -> UInt64:
    proto 0 1
    // smart_contracts/vote_chain/contract.py:75
    // Global.min_balance
    global MinBalance
    // smart_contracts/vote_chain/contract.py:61
    // local_base_opt_in_fee = UInt64(100_000)  # Base opt-in fee.
    pushint 100000 // 100000
    // smart_contracts/vote_chain/contract.py:75-76
    // Global.min_balance
    // + local_base_opt_in_fee
    +
    // smart_contracts/vote_chain/contract.py:69-70
    // # Calculate the total fees for integers and byte slices
    // total_local_int_fee = local_uint_fee * local_num_uint
    pushint 57000 // 57000
    // smart_contracts/vote_chain/contract.py:75-77
    // Global.min_balance
    // + local_base_opt_in_fee
    // + total_local_int_fee
    +
    // smart_contracts/vote_chain/contract.py:73-79
    // # Return the total minimum balance requirement total
    // return (
    //     Global.min_balance
    //     + local_base_opt_in_fee
    //     + total_local_int_fee
    //     + total_local_byte_fee
    // )
    retsub


// smart_contracts.vote_chain.contract.VoteChain.opt_out(account: bytes) -> void:
opt_out:
    // smart_contracts/vote_chain/contract.py:115-117
    // # Define abimethod that lets the user opt out
    // @arc4.abimethod(allow_actions=["CloseOut"])
    // def opt_out(self, account: Account) -> None:
    proto 1 0
    // smart_contracts/vote_chain/contract.py:120
    // Application(self.app_id.id)
    intc_0 // 0
    bytec 8 // "app_id"
    app_global_get_ex
    assert // check self.app_id exists
    // smart_contracts/vote_chain/contract.py:118-121
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(self.app_id.id)
    // ), "Account must first be opted-in in order to close out."
    frame_dig -1
    swap
    app_opted_in
    assert // Account must first be opted-in in order to close out.
    // smart_contracts/vote_chain/contract.py:123
    // assert self.local_vote_status[account] == UInt64(0) or (
    frame_dig -1
    intc_0 // 0
    bytec_0 // "vote_status"
    app_local_get_ex
    assert // check self.local_vote_status exists for account
    // smart_contracts/vote_chain/contract.py:123-126
    // assert self.local_vote_status[account] == UInt64(0) or (
    //     self.local_vote_status[account] == UInt64(1)
    //     and Global.latest_timestamp > self.vote_end_date_unix
    // ), "Can only opt out when voting period expires or if you haven't already voted."
    bz opt_out_bool_true@3
    // smart_contracts/vote_chain/contract.py:124
    // self.local_vote_status[account] == UInt64(1)
    frame_dig -1
    intc_0 // 0
    bytec_0 // "vote_status"
    app_local_get_ex
    assert // check self.local_vote_status exists for account
    intc_1 // 1
    ==
    // smart_contracts/vote_chain/contract.py:124-125
    // self.local_vote_status[account] == UInt64(1)
    // and Global.latest_timestamp > self.vote_end_date_unix
    bz opt_out_bool_false@4
    // smart_contracts/vote_chain/contract.py:125
    // and Global.latest_timestamp > self.vote_end_date_unix
    global LatestTimestamp
    intc_0 // 0
    bytec 10 // "vote_end_date_unix"
    app_global_get_ex
    assert // check self.vote_end_date_unix exists
    >
    // smart_contracts/vote_chain/contract.py:124-125
    // self.local_vote_status[account] == UInt64(1)
    // and Global.latest_timestamp > self.vote_end_date_unix
    bz opt_out_bool_false@4

opt_out_bool_true@3:
    intc_1 // 1
    b opt_out_bool_merge@5

opt_out_bool_false@4:
    intc_0 // 0

opt_out_bool_merge@5:
    // smart_contracts/vote_chain/contract.py:123-126
    // assert self.local_vote_status[account] == UInt64(0) or (
    //     self.local_vote_status[account] == UInt64(1)
    //     and Global.latest_timestamp > self.vote_end_date_unix
    // ), "Can only opt out when voting period expires or if you haven't already voted."
    assert // Can only opt out when voting period expires or if you haven't already voted.
    // smart_contracts/vote_chain/contract.py:128-129
    // # Delete the user's local storage
    // del self.local_vote_status[account]
    frame_dig -1
    bytec_0 // "vote_status"
    app_local_del
    // smart_contracts/vote_chain/contract.py:130
    // del self.local_vote_choice[account]
    frame_dig -1
    bytec_2 // "vote_choice"
    app_local_del
    // smart_contracts/vote_chain/contract.py:132-133
    // # Decrease the total count of opted-in accounts
    // self.total_accounts_opted_in -= UInt64(1)
    intc_0 // 0
    bytec_1 // "total_accounts_opted_in"
    app_global_get_ex
    assert // check self.total_accounts_opted_in exists
    intc_1 // 1
    -
    bytec_1 // "total_accounts_opted_in"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:137-143
    // itxn.Payment(
    //     receiver=account,
    //     amount=self.calc_mbr() - min_txn_fee,
    //     sender=self.app_address,
    //     fee=min_txn_fee,
    //     note="Opt-out MBR refund.",
    // ).submit()
    itxn_begin
    // smart_contracts/vote_chain/contract.py:139
    // amount=self.calc_mbr() - min_txn_fee,
    callsub calc_mbr
    // smart_contracts/vote_chain/contract.py:135-136
    // # Submit inner transaction (account gets their mbr payment refunded)
    // min_txn_fee = UInt64(1000)
    intc_3 // 1000
    // smart_contracts/vote_chain/contract.py:139
    // amount=self.calc_mbr() - min_txn_fee,
    -
    // smart_contracts/vote_chain/contract.py:140
    // sender=self.app_address,
    intc_0 // 0
    bytec 9 // "app_address"
    app_global_get_ex
    assert // check self.app_address exists
    // smart_contracts/vote_chain/contract.py:142
    // note="Opt-out MBR refund.",
    pushbytes "Opt-out MBR refund."
    itxn_field Note
    itxn_field Sender
    itxn_field Amount
    frame_dig -1
    itxn_field Receiver
    // smart_contracts/vote_chain/contract.py:137
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/vote_chain/contract.py:135-136
    // # Submit inner transaction (account gets their mbr payment refunded)
    // min_txn_fee = UInt64(1000)
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/vote_chain/contract.py:137-143
    // itxn.Payment(
    //     receiver=account,
    //     amount=self.calc_mbr() - min_txn_fee,
    //     sender=self.app_address,
    //     fee=min_txn_fee,
    //     note="Opt-out MBR refund.",
    // ).submit()
    itxn_submit
    // smart_contracts/vote_chain/contract.py:145-146
    // # Log info on-chain
    // log("Close-out successful for account address: ", account)
    pushbytes "Close-out successful for account address: "
    frame_dig -1
    concat
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.set_vote_dates(vote_start_date_str: bytes, vote_start_date_unix: uint64, vote_end_date_str: bytes, vote_end_date_unix: uint64) -> void:
set_vote_dates:
    // smart_contracts/vote_chain/contract.py:148-156
    // # Define abimethod that sets the vote deadline (consider making it updatable)
    // @arc4.abimethod()
    // def set_vote_dates(
    //     self,
    //     vote_start_date_str: String,
    //     vote_start_date_unix: UInt64,
    //     vote_end_date_str: String,
    //     vote_end_date_unix: UInt64,
    // ) -> None:
    proto 4 0
    // smart_contracts/vote_chain/contract.py:159
    // Txn.sender == self.creator_address
    txn Sender
    intc_0 // 0
    bytec 11 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    ==
    // smart_contracts/vote_chain/contract.py:157-160
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     Txn.sender == self.creator_address
    // ), "Only App creator can set vote dates."
    assert // Only App creator can set vote dates.
    // smart_contracts/vote_chain/contract.py:163
    // vote_start_date_unix < vote_end_date_unix
    frame_dig -3
    frame_dig -1
    <
    // smart_contracts/vote_chain/contract.py:162-164
    // assert (
    //     vote_start_date_unix < vote_end_date_unix
    // ), "Start date must be earlier than end date."
    assert // Start date must be earlier than end date.
    // smart_contracts/vote_chain/contract.py:166
    // assert vote_end_date_unix - vote_start_date_unix <= UInt64(
    frame_dig -1
    frame_dig -3
    -
    // smart_contracts/vote_chain/contract.py:166-168
    // assert vote_end_date_unix - vote_start_date_unix <= UInt64(
    //     14 * 24 * 60 * 60
    // ), "Voting period can not exceed 14 days."
    pushint 1209600 // 1209600
    <=
    assert // Voting period can not exceed 14 days.
    // smart_contracts/vote_chain/contract.py:170
    // assert self.vote_dates_final == UInt64(0), "Vote dates can only be set once."
    intc_0 // 0
    bytec 7 // "vote_dates_final"
    app_global_get_ex
    assert // check self.vote_dates_final exists
    !
    assert // Vote dates can only be set once.
    // smart_contracts/vote_chain/contract.py:172-173
    // # Get and store vote dates in unix int format
    // self.vote_start_date_unix = vote_start_date_unix
    bytec 12 // "vote_start_date_unix"
    frame_dig -3
    app_global_put
    // smart_contracts/vote_chain/contract.py:174
    // self.vote_end_date_unix = vote_end_date_unix
    bytec 10 // "vote_end_date_unix"
    frame_dig -1
    app_global_put
    // smart_contracts/vote_chain/contract.py:176-177
    // # Make vote dates final
    // self.vote_dates_final = UInt64(1)
    bytec 7 // "vote_dates_final"
    intc_1 // 1
    app_global_put
    // smart_contracts/vote_chain/contract.py:179-180
    // # Log info on-chain
    // log("Vote start date: ", vote_start_date_str)
    pushbytes "Vote start date: "
    frame_dig -4
    concat
    log
    // smart_contracts/vote_chain/contract.py:181
    // log("Vote end date: ", vote_end_date_str)
    pushbytes "Vote end date: "
    frame_dig -2
    concat
    log
    retsub


// smart_contracts.vote_chain.contract.VoteChain.cast_vote(account: bytes, choice: uint64) -> void:
cast_vote:
    // smart_contracts/vote_chain/contract.py:183-185
    // # Define abimethod that lets the user cast their vote
    // @arc4.abimethod
    // def cast_vote(self, account: Account, choice: UInt64) -> None:
    proto 2 0
    // smart_contracts/vote_chain/contract.py:188
    // Application(self.app_id.id)
    intc_0 // 0
    bytec 8 // "app_id"
    app_global_get_ex
    assert // check self.app_id exists
    // smart_contracts/vote_chain/contract.py:186-189
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(self.app_id.id)
    // ), "Account must be opted-in before voting."
    frame_dig -2
    swap
    app_opted_in
    assert // Account must be opted-in before voting.
    // smart_contracts/vote_chain/contract.py:191
    // assert self.local_vote_status[account] == UInt64(
    frame_dig -2
    intc_0 // 0
    bytec_0 // "vote_status"
    app_local_get_ex
    assert // check self.local_vote_status exists for account
    // smart_contracts/vote_chain/contract.py:191-193
    // assert self.local_vote_status[account] == UInt64(
    //     0
    // ), "This account already voted."
    !
    assert // This account already voted.
    // smart_contracts/vote_chain/contract.py:196
    // choice == UInt64(1) or choice == UInt64(2) or choice == UInt64(3)
    frame_dig -1
    intc_1 // 1
    ==
    dup
    bnz cast_vote_bool_true@3
    frame_dig -1
    intc_2 // 2
    ==
    bnz cast_vote_bool_true@3
    frame_dig -1
    pushint 3 // 3
    ==
    bz cast_vote_bool_false@4

cast_vote_bool_true@3:
    intc_1 // 1
    b cast_vote_bool_merge@5

cast_vote_bool_false@4:
    intc_0 // 0

cast_vote_bool_merge@5:
    // smart_contracts/vote_chain/contract.py:195-197
    // assert (
    //     choice == UInt64(1) or choice == UInt64(2) or choice == UInt64(3)
    // ), "Invalid voting choice."
    assert // Invalid voting choice.
    // smart_contracts/vote_chain/contract.py:200
    // Global.latest_timestamp > self.vote_start_date_unix
    global LatestTimestamp
    intc_0 // 0
    bytec 12 // "vote_start_date_unix"
    app_global_get_ex
    assert // check self.vote_start_date_unix exists
    >
    // smart_contracts/vote_chain/contract.py:199-201
    // assert (
    //     Global.latest_timestamp > self.vote_start_date_unix
    // ), "Voting has not started."
    assert // Voting has not started.
    // smart_contracts/vote_chain/contract.py:203
    // assert Global.latest_timestamp < self.vote_end_date_unix, "Voting has ended."
    global LatestTimestamp
    intc_0 // 0
    bytec 10 // "vote_end_date_unix"
    app_global_get_ex
    assert // check self.vote_end_date_unix exists
    <
    assert // Voting has ended.
    // smart_contracts/vote_chain/contract.py:205-206
    // # Mark the account as having voted
    // self.local_vote_status[account] = UInt64(1)
    frame_dig -2
    bytec_0 // "vote_status"
    intc_1 // 1
    app_local_put
    // smart_contracts/vote_chain/contract.py:208-209
    // # Increment count for total votes
    // self.total_vote_count += UInt64(1)
    intc_0 // 0
    bytec 6 // "total_vote_count"
    app_global_get_ex
    assert // check self.total_vote_count exists
    intc_1 // 1
    +
    bytec 6 // "total_vote_count"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:211-212
    // # Update vote tally
    // if choice == UInt64(1):
    frame_dig 0
    bz cast_vote_else_body@7
    // smart_contracts/vote_chain/contract.py:213
    // self.choice1_vote_count += UInt64(1)
    intc_0 // 0
    bytec_3 // "choice1_vote_count"
    app_global_get_ex
    assert // check self.choice1_vote_count exists
    intc_1 // 1
    +
    bytec_3 // "choice1_vote_count"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:214
    // self.local_vote_choice[account] = UInt64(1)
    frame_dig -2
    bytec_2 // "vote_choice"
    intc_1 // 1
    app_local_put
    b cast_vote_after_if_else@11

cast_vote_else_body@7:
    // smart_contracts/vote_chain/contract.py:215
    // elif choice == UInt64(2):
    frame_dig -1
    intc_2 // 2
    ==
    bz cast_vote_else_body@9
    // smart_contracts/vote_chain/contract.py:216
    // self.choice2_vote_count += UInt64(1)
    intc_0 // 0
    bytec 4 // "choice2_vote_count"
    app_global_get_ex
    assert // check self.choice2_vote_count exists
    intc_1 // 1
    +
    bytec 4 // "choice2_vote_count"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:217
    // self.local_vote_choice[account] = UInt64(2)
    frame_dig -2
    bytec_2 // "vote_choice"
    intc_2 // 2
    app_local_put
    b cast_vote_after_if_else@11

cast_vote_else_body@9:
    // smart_contracts/vote_chain/contract.py:219
    // self.choice3_vote_count += UInt64(1)
    intc_0 // 0
    bytec 5 // "choice3_vote_count"
    app_global_get_ex
    assert // check self.choice3_vote_count exists
    intc_1 // 1
    +
    bytec 5 // "choice3_vote_count"
    swap
    app_global_put
    // smart_contracts/vote_chain/contract.py:220
    // self.local_vote_choice[account] = UInt64(3)
    frame_dig -2
    bytec_2 // "vote_choice"
    pushint 3 // 3
    app_local_put

cast_vote_after_if_else@11:
    // smart_contracts/vote_chain/contract.py:222-223
    // # Log info on-chain
    // log("Vote casted successfully for account addres: ", account)
    pushbytes "Vote casted successfully for account addres: "
    frame_dig -2
    concat
    log
    // smart_contracts/vote_chain/contract.py:224
    // log("Vote cased for choice: ", choice)
    frame_dig -1
    itob
    pushbytes "Vote cased for choice: "
    swap
    concat
    log
    retsub
